/**
 * Gallery class for managing the book gallery functionality
 */
export class SimpleGallery {
    constructor() {
        console.log('DEBUG: SimpleGallery constructor started');
        
        // Initialize state variables
        this.initialized = false;
        
        // Initialize cart elements
        this.cartCountElement = document.querySelector('[data-cart-count]');
        this.cartDropdown = document.querySelector('.cart-dropdown');
        this.cartItemsContainer = document.querySelector('#cart-items');
        this.cartTotalElement = document.querySelector('[data-cart-total]');
        this.checkoutButton = document.querySelector('.checkout-button');
        
        // Ensure cart count is visible initially
        if (this.cartCountElement) {
            this.cartCountElement.style.display = 'flex';
        }
        
        // Initialize cart from localStorage with error handling
        try {
            const savedCart = localStorage.getItem('cart');
            this.cart = savedCart ? JSON.parse(savedCart) : [];
            // Ensure cart is always an array
            if (!Array.isArray(this.cart)) {
                console.warn('Cart was not an array, resetting to empty array');
                this.cart = [];
                localStorage.setItem('cart', JSON.stringify(this.cart));
            }
        } catch (error) {
            console.error('Error loading cart from localStorage:', error);
            this.cart = [];
            localStorage.setItem('cart', JSON.stringify(this.cart));
        }
        
        this.orderProcessed = false;
        
        // Debug logging
        console.log('Cart initialized:', this.cart);
        
        // Initialize cart display
        this.updateCartDisplay();
        
        // Initialize products data
        this.products = [
            {
                name: "The Great Gatsby",
                author: "F. Scott Fitzgerald",
                description: "A masterpiece of American fiction that captures the essence of the Jazz Age.",
                price: 15.99,
                category: "fiction",
                image: "https://cdn.pixabay.com/photo/2019/01/30/08/30/book-3964050_640.jpg"
            },
            // ... rest of the products array
        ];
    }

    initialize() {
        if (this.initialized) {
            console.log('DEBUG: Gallery already initialized');
            return;
        }

        console.log('DEBUG: Initializing gallery');
        
        try {
            this.setupCartControls();
            this.updateCartDisplay();
            this.initialized = true;
        } catch (error) {
            console.error('Error during initialization:', error);
            this.showError();
        }
    }

    addToCart(product) {
        console.log('DEBUG: Adding to cart:', product);
        
        try {
            // Ensure this.cart is an array
            if (!Array.isArray(this.cart)) {
                console.warn('Cart was not an array, resetting to empty array');
                this.cart = [];
            }
            
            // Find if product already exists in cart
            const existingProduct = this.cart.find(item => item.name === product.name);
            
            if (existingProduct) {
                existingProduct.quantity = (existingProduct.quantity || 1) + 1;
            } else {
                this.cart.push({
                    ...product,
                    quantity: 1
                });
            }

            // Save to localStorage
            localStorage.setItem('cart', JSON.stringify(this.cart));
            
            // Show feedback and update display
            this.updateCartDisplay();
            this.showAlert('Item added to cart');
            
        } catch (error) {
            console.error('Error adding to cart:', error);
            this.showAlert('Error adding item to cart');
        }
    }

    updateCartDisplay() {
        try {
            // Ensure this.cart is an array
            if (!Array.isArray(this.cart)) {
                this.cart = [];
            }
            
            // Update cart count
            const totalItems = this.cart.reduce((sum, item) => sum + (item.quantity || 1), 0);
            if (this.cartCountElement) {
                this.cartCountElement.textContent = totalItems;
                this.cartCountElement.style.display = 'flex';
                this.cartCountElement.style.visibility = totalItems === 0 ? 'hidden' : 'visible';
            }

            // Update cart items
            if (this.cartItemsContainer) {
                this.cartItemsContainer.innerHTML = this.cart.map(item => `
                    <div class="cart-item">
                        <div class="cart-item-details">
                            <h4>${item.name}</h4>
                            <p>by ${item.author}</p>
                            <p>$${item.price.toFixed(2)} Ã— ${item.quantity}</p>
                        </div>
                        <div class="cart-item-actions">
                            <button class="btn-remove" data-product="${item.name}">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                `).join('');

                // Add remove button listeners
                this.cartItemsContainer.querySelectorAll('.btn-remove').forEach(button => {
                    button.addEventListener('click', () => {
                        const productName = button.dataset.product;
                        this.removeFromCart(productName);
                    });
                });
            }

            // Update total
            if (this.cartTotalElement) {
                const total = this.cart.reduce((sum, item) => sum + (item.price * (item.quantity || 1)), 0);
                this.cartTotalElement.textContent = total.toFixed(2);
            }

            // Update checkout button
            if (this.checkoutButton) {
                this.checkoutButton.disabled = this.cart.length === 0;
            }
        } catch (error) {
            console.error('Error updating cart display:', error);
        }
    }

    removeFromCart(productName) {
        try {
            this.cart = this.cart.filter(item => item.name !== productName);
            localStorage.setItem('cart', JSON.stringify(this.cart));
            this.updateCartDisplay();
            this.showAlert('Item removed from cart');
        } catch (error) {
            console.error('Error removing from cart:', error);
            this.showAlert('Error removing item from cart');
        }
    }

    clearCart() {
        try {
            this.cart = [];
            localStorage.setItem('cart', JSON.stringify(this.cart));
            this.updateCartDisplay();
            this.showAlert('Cart has been cleared');
            this.orderProcessed = false;
        } catch (error) {
            console.error('Error clearing cart:', error);
            this.showAlert('Error clearing cart');
        }
    }

    processOrder() {
        try {
            if (this.orderProcessed) {
                this.showAlert('This order has already been processed!');
                return;
            }

            if (this.cart.length === 0) {
                this.showAlert('Your cart is empty!');
                return;
            }

            this.orderProcessed = true;
            this.showAlert('Order processed successfully! Thank you for your purchase.');
            this.cart = [];
            localStorage.setItem('cart', JSON.stringify(this.cart));
            this.updateCartDisplay();
        } catch (error) {
            console.error('Error processing order:', error);
            this.showAlert('Error processing order');
        }
    }

    showAlert(message) {
        const alertDiv = document.createElement('div');
        alertDiv.className = 'cart-alert';
        alertDiv.textContent = message;
        document.body.appendChild(alertDiv);
        
        setTimeout(() => {
            alertDiv.remove();
        }, 3000);
    }
}

// Initialize gallery when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    const gallery = new SimpleGallery();
    gallery.initialize();
});
